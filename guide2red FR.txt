





          [Note: Ceci est une reproduction des Directives concernant la guerre de base
          l'origine produit par Jones et Dewdney en Mars 1984]



                                LIGNES DIRECTRICES DE BASE DE GUERRE

                           DG Jones et AK Dewdney

                          Département d'Informatique
                         L'Université de Western Ontario

                                    Mars 1984




          Ces lignes directrices suggèrent des moyens de mettre en œuvre une version simple
          de guerre de base, le jeu décrit dans les «Récréations informatiques"
          département de Scientific American en mai 1984.

          Exemples de programmation sont donnés dans un style similaire à celui de la
          Pascal et C langues. Les lecteurs peu familiers avec des constructions de
          ces langues, telles que l'instruction CASE, peuvent consulter
          un manuel Pascal.


                            L'ensemble Redcode d'instruction

          Programmes de guerre core sont écrits dans un langage de type d'assemblage
          appelé Redcode. Les huit instructions incluses dans la version
          de la langue présentée ici sont loin d'être les seuls
          possible, en effet, la mise en œuvre initiale de la guerre de base, fait
          sur un mini-ordinateur, a eu un plus grand jeu d'instructions. S'il n'y
          de nombreux types d'instructions, cependant, la forme codée de chaque
          instruction prend plus de place, et ainsi de la zone de mémoire
          nécessaire pour CORE doit être plus grand. Mars, le programme inter-
          programmes prets RedCode, se développe aussi la taille de l'instruction
          tion réglée augmente. La complexité de votre mise en Guerre du Coeur
          tion peut être limitée par la quantité de mémoire disponible dans
          votre ordinateur.






          BASE DE DIRECTIVES DE GUERRE 2.

          Si vous choisissez de créer votre propre un ensemble d'instructions Redcode, deux
          points doivent être gardés à l'esprit. Tout d'abord, chaque instruction de Redcode
          doivent occuper un emplacement unique dans CORE. Dans beaucoup ensemble lan-
          Jauges une instruction peut s'étendre sur plusieurs adresses, mais
          pas dans Redcode. Deuxièmement, il n'y a pas de registres disponibles pour
          programmes de RedCode: toutes les données sont conservées dans CORE et manipulés
          il.

          Voici un simple jeu d'instructions de Redcode:

          Codé Mnémonique ARGUM ent action
           Symbole forme
          -------------------------------------------------- ----------
             0 DAT B Initialisation lieu à la valeur B.

             1 MOV AB Déplacer A dans l'emplacement B.

             2 ADD AB Ajouter opérande A à contenu
                                        l'emplacement B et ranger le résultat dans
                                        emplacement B.

             3 SOUS AB Soustraire opérande A de contenu
                                        de l'emplacement B et ranger le résultat dans
                                        emplacement B.

             4 JMP B Aller à l'emplacement B.

             5 JMZ AB Si opérande A est 0, passer à loca-
                                        tion B; continuer autrement
                                        prochaine instruction.

             6 DJZ AB décrémentation contenu de l'emplacement A
                                        par 1. Si l'emplacement A détient désormais 0,
                                        sauter à l'emplacement B, sinon
                                        continuer avec l'instruction suivante.

             7 CMP AB Comparer opérande A avec opérande B.
                                        Si elles ne sont pas égales, passez à côté
                                        instruction; continuer autrement
                                        avec l'instruction suivante.


                                 Modes d'adressage

          Il existe différentes manières de spécifier les adresses de mémoire dans un
          programme en langage assembleur. Afin de rendre l'exécution d'un
          Redcode programme indépendant de sa position dans la mémoire, une spéciale
          forme d'adressage relatif est utilisé. Encore une fois, votre version de Red-
          code peut avoir différents modes d'adressage ou les autres, al-






          BASE DE DIRECTIVES DE GUERRE 3.

          mais vous devez être conscient lorsque vous choisissez les modes que Mars sera
          charger votre programme de Redcode à une adresse au CORE qui ne peuvent pas être
          prédite à l'avance.

          Les trois modes d'adressage dans notre version de Redcode sont identi-
          fiée par des symboles placés avant l'argument:

          Codé Mnémonique Nom Signification
           Symbole forme
          -------------------------------------------------- -----------
             0 # immédiate Le nombre qui suit ce symbole
                                        est l'opérande.

             1 <aucun> relative Le nombre spécifie un décalage
                                        à partir de l'instruction courante. Mars
                                        ajoute le décalage à l'adresse de
                                        l'instruction en cours, le nom-
                                        bre stocké à l'emplacement atteint
                                        de cette façon est l'opérande.

             2 @ indirect Le numéro suivant ce symbole
                                        Indique un décalage de l'actu-
                                        louer instruction à un emplacement
                                        où l'adresse relative de l'
                                        opérande n'est trouvée. Mars ajoute le
                                        décalage à l'adresse de l'actu-
                                        louer instruction et récupère la
                                        numéro enregistré à la lo-spécifié
                                        cation, ce nombre est alors inter-
                                        prétée comme un décalage à partir de sa propre
                                        adresse. Le nombre trouvé à cette
                                        deuxième emplacement est l'opérande.

          Tous adresse arithmétique se fait modulo la taille de CORE. Le MOD
          opérateur est le reste de la division, et ainsi de 5096 MOD 4096
          est 1,000. Ainsi, si votre tableau de CORE 4096 emplacements, une référence
          à l'emplacement 5096 est pris comme une référence à l'emplacement 1000.

          Car un programme ne peut jamais se référer à une adresse absolue, certains
          modes d'adressage pour des opérandes n'ont pas de sens. Pour l'ex-
          exemple, dans l'instruction MOV # 5 # 0 l'opérande à être déplacé est
          la valeur immédiate de 5, mais l'argument indiquant où il est
          pour être déplacé n'est pas une adresse mais la valeur immédiate 0, ce qui
          a pas d'interprétation claire. Les modes souhaités peuvent être stockés dans
          un tableau à deux dimensions qui est consulté par Mars quand il inter-
          Prets les instructions.

          L'exemple ci-dessous devrait illustrer la façon dont les instructions et les
          modes d'adressage travaillent. Le code est tiré d'un programme de lutte






          BASE DE DIRECTIVES DE GUERRE 4.

          appelé Nain, qui a été décrit dans le Scientific American
          article. Ici, cependant, il a été modifié pour fonctionner dans un CORE
          réseau de 4096 sites au lieu d'un avec 8000 emplacements.

          Lieu Inst RUC tion d'action
          -------------------------------------------------- ----------
             0: 0 DAT Cette situation tient d'abord 0.

             1: ADD # 4 -1 Opérande A est 4. L'adresse de l'opérande
                                   B est 1 + (-1) = 0, d'où l'opérande B est la
                                   contenu de cet emplacement dans CORE. Ajouter
                                   les deux opérandes et stocker le résultat
                                   dans l'emplacement 0.

             2: MOV # 0 @ -2 Opérande A est 0. L'adresse de l'opérande
                                   B est le nombre stocké à l'emplacement
                                   2 + (-2) = 0, et si l'opérande A est stocké à
                                   l'emplacement donné par 0 + (contenu de lo-
                                   cation 0).

             3: JMP -2 Continuer l'exécution de l'instruction
                                   à l'emplacement 3 + (-2) = 1.


               Traduire un programme Redcode dans un format codé

          CORE est généralement mis en œuvre en tant que tableau d'entiers. Supposer
          le tableau a 4096 (ou 2 ^ 12) éléments, puis exactement 12 bits sont
          requis pour chaque champ opérande dans une instruction. Il est
          trois modes d'adressage, et donc pour chaque champ de mode deux bits suf-
          fice. Si quatre bits sont alloué à l'instruction elle-même, chaque
          instruction peut être stockée dans 32 bits, ou quatre octets.

          Chaque élément de la matrice peut avoir la forme suivante:

          nombre de bits: 4 2 2 12 12
          domaines: mode de type pour le mode A pour BAB

          L'exemple ci-dessous propose une façon de coder une instruction
          un nombre entier binaire de 32 bits. (Un système un peu différent, basé sur
          entiers décimaux, a été donné dans le artice Scientific American.)

          Instruction champs codé Entier
          -------------------------------------------------- --------------
          MOV # 5 @ 20 type = 1 1 * 2 ^ 28 = 268435456
                         Mode pour A = 0 0 * 2 ^ 26 = 0
                         Mode B = 2 2 * 2 ^ 24 = 33554432
                         A = 5 5 * 2 ^ 12 = 20480
                         B = 20 20 * 2 ^ 0 = 20
                                                                 ---------
                                                                 302010388






          BASE DE DIRECTIVES DE GUERRE 5.

          Le programmeur de l'expérience sera probablement vouloir automatiser la
          conversion d'instructions mnémoniques en nombres entiers par la rédaction d'un
          Redcode assembleur pour faire la traduction.


                                 Règles de la guerre de base

          Les règles de la guerre de base sont simples et peu. Le plus simple des règles
          sont, le plus simple est le programme de l'arbitre doit être. Voici l'
          règles que nous avons utilisés:

              Une. Deux programmes de bataille sont chargés dans le noyau au hasard cho-
                 sen emplacements de départ, sous la contrainte que
                 les programmes ne peuvent pas se chevaucher.

              2. La bataille se déroule comme Mars exécute une instruction de
                 programme X, une instruction du programme Y, un de X,
                 un de Y, et ainsi de suite, jusqu'à ce que l'un des deux événements se produit:

                   i) Un nombre prédéfini de directives a
                       été exécutés et les deux programmes sont encore en cours d'exécution.
                       La bataille est alors déclaré nul et fini.

                   ii) Une instruction est rencontrée qui ne peuvent être inter-
                       prété par Mars et donc ne peut pas être exécuté. La
                       programme avec l'instruction défectueuse est le perdant.

          Un problème avec ces règles est que ils récompensent petite mais non
          programmes intéressants tels que:

               JMP 0 / exécuter cette instruction à plusieurs reprises.

          Ce programme est offert sans agressivité, et pourtant il est difficile de
          détruire tout simplement en raison de sa taille. Un programme tel que Nain, sur
          d'autre part, est si destructeur qu'il est difficile d'écrire lar-
          ger, les programmes de RedCode plus complexes qui peuvent rivaliser contre
          il. Le programme plus vaste a trop peu de temps pour lancer son attaque
          avant une «bombe à zéro" des grèves nains quelque part dans son
          instructions. D'autres règles pourraient être en mesure d'atténuer les pro-
          blèmes, mais rappelez-vous que le programme de l'arbitre doit être en mesure de im-
          complément des règles.


                                 Le Programme Mars

          En plus de servir d'arbitre dans une bataille de la guerre de base, Mars
          est responsable de l'exécution des programmes de bataille. Mars premier
          charges deux programmes de combat X et Y dans le tableau de CORE, mettant
          eux à des positions arbitraires mais en prenant soin que l'on programme est
          pas écrit sur l'autre. Pour chaque programme Mars doit également
          connaître l'adresse où l'exécution doit commencer; cette information
          peut être mis dans un fichier avec le programme Redcode codé.





          BASE DE DIRECTIVES DE GUERRE 6.

          Pendant l'exécution Mars doit continuellement suivre le courant
          pointeur d'instruction pour chaque programme. Si CORE est mis en œuvre
          un tableau d'entiers, le pointeur d'instruction est simplement un indice
          dans le tableau. Mars exécute ensuite une boucle simple:

          LOOP: SI prochaine instruction de X peut être exécuté, l'exécuter
                    AUTRE déclarer X le perdant, Y le gagnant; GOTO ABORT
                  SI prochaine instruction de Y peut être exécuté, l'exécuter
                    AUTRE déclarer Y le perdant, le gagnant X; GOTO ABORT
                  count = nombre + 1
                  SI compteur <limiter THEN GOTO LOOP
                    ELSE GOTO ABORT

          Le compteur est maintenu en cas ni programme est capable de vaincre
          l'autre. Sans elle, Mars pourrait être emprisonné dans une boucle sans fin.


                             Exécution d'une instruction

          Le pseudo-code suivant pour une partie de Mars illustre comment une
          instruction de Redcode peut être interprété et exécuté. (Remarque tat
          l'opérateur DIV donne le résultat entier de la division, qui est,
          100 DIV 30 donne un résultat de 3.) Dans l'exemple, nous supposons qu'il est
          le tour de programme X pour exécuter son instruction suivante, qui est spec-
          ified par le X-indice variable.

          Variables entières utilisées:

            instruction / instruction en cours (codé comme entier de 32 bits)
            Type / le type d'instruction (codé)
            mode A / le mode d'adressage pour l'opérande A (codé)
            mode B / le mode d'adressage pour l'opérande B (codé)
            domaine-A / le nombre codé dans le champ A
            terrain B / le nombre codé dans le domaine B
            adresse-A / adresse de l'opérande A (moins immédiat)
            adresse-B / adresse de l'opérande B (moins immédiat)
            pointeur / variable utilisée dans le calcul des adresses indirectes
            opérande A / valeur de l'opérande A
            opérande B / valeur de l'opérande B
            réponse / résultat calculé par l'instruction

          déclarations du Programme:

           instruction = CORE [X-index] / obtenir l'instruction
           type = instruction DIV 2 ^ 28 / obtenir 4 premiers bits
           mode A = (instruction DIV 2 ^ 26) MOD 2 ^ 2/2 obtenir bits suivants
           mode B = (instruction DIV 2 ^ 24) MOD 2 ^ 2/2 obtenir bits suivants
           domaine-A = (instruction DIV 2 ^ 12) MOD 2 ^ 12/12 bits suivants se
           champ B = instruction MOD 2 ^ 12/12 obtiennent derniers bits






          BASE DE DIRECTIVES DE GUERRE 7.

            AFFAIRE mode A DES

              0: opérande A = domaine-A
                   / Mode immédiat; opérande donné dans le champ lui-même

              1: adresse-A = (X-index + terrain A) MOD 4096
                 opérande A = CORE [adresse-A]
                  Mode / rapport; adresse de l'opérande A est index + domaine A;
                  / Opérande A est le contenu de CORE à cette adresse

              2: pointeur = (X-index + terrain A) MOD 4096
                 adresse-A = (pointeur + CORE [pointeur]) MOD 4096
                 opérande A = CORE [adresse-A]
                  / Mode indirect; pointeur sur l'adresse de l'opérande A est
                  / Index + domaine A; adresse de l'opérande A est la valeur
                  / Du pointeur + le contenu de l'emplacement qu'elle pointe
                  / À; opérande A est le contenu de CORE à cette adresse.

              AUTRE: GOTO ABORT

          À ce point dans le programme une déclaration de cas similaire, basée sur
          B-mode variable, est utilisée pour assigner une valeur à l'opérande B.
          Une routine de vérification d'erreur ne peut être invoquée pour s'assurer que
          le mode de chaque opérande est autorisée pour une instruction de l'
          type spécifié par le type de variable. Si aucune erreur n'a été en-
          contré, Mars se poursuit avec le code suivant:

            X-index = X-index + 1 / incrémenter l'instruction
                                             / Indice en préparation de
                                             / Programme prochain tour de X; la
                                             / Index peut être la suite
                                             / Modifié par un JMP, JMZ, DJZ
                                             / Ou instruction CMP

            Type de cas de

              0: GOTO ABORT / DAT, ne peut pas
                                                  / Être exécuté

              1: CORE [adresse-B] = opérande A / MOV instruction

              2: réponse = opérande B + opérande-A / ADD instruction
                 CORE [adresse-B] = réponse

              3: réponse = opérande B - opérande A / SUB instruction
                 CORE [adresse-B] = réponse

              4: X-index = opérande B / instruction JMP, le
                                                  / Instruction suivante est à
                                                  / L'emplacement spécifié
                                                  / Par l'opérande B






          BASE DE DIRECTIVES DE GUERRE 8.

              5: si l'opérande-A = 0 ALORS / instruction JMZ; si
                    X-index = opérande B / opérande A est zéro, saut

              6: réponse = opérande A - instruction 1 / de DJZ; dec-
                 CORE [adresse-A] = réponse / rement opérande A et
                 Si la réponse = 0 résultat ALORS / magasin, si elle est
                    X-index = opérande B / zéro, saut

              7: SI opérande A = opérande B / instruction CMP; si
                    X-index = X-index + 1 / les opérandes sont égaux,
                                                  / Sauter prochaine instruction

              AUTRE: GOTO ABORT

            FIN / Une instruction de programme X a été interprété
                         / Et exécuté avec succès; Mars va maintenant à
                         / Exécuter l'instruction suivante du programme Y.

          ABANDONNER: / Ce label est atteint que si le courant en
                         / Construction de programme X ne pouvait être interprétée
                         / Et exécuté. Programme X est déclaré perdant
                         / Y et programme gagnant.


                                Affichage d'une bataille

          L'auteur d'un programme de Redcode serait frustré si son
          création ont été chargés dans les régions les plus sombres de l'âme et alors,
          après une courte bataille, déclaré mort bu l'arbitre Mars avec-
          toute indication de ce qui s'est passé. Était le programme adverse
          supérieur, ou était-ce simplement un bogue dans le programme? Certains trace
          des événements dans une bataille est nécessaire.

          L'affichage simple d'une bataille de la guerre de base en cours est une liste
          de l'exécution de deux programmes sur un écran divisé. L'adresse de la
          chaque instruction et son symbole mnémonique doit être donnée. A
          affichage typique pourrait ressembler à ceci:

               1135: MOV 0 1 202: ADD # 4 -1
               1136: MOV 0 1 203: MOV # 0 @ -2
               1137: MOV 0 1 204: JMP -2
               1138: MOV 0 1 205: ADD # 4 -1
               1139: MOV 0 1 206: MOV # 0 @ -2
               1140: MOV 0 1 207: JMP -2
               1141: MOV 0 1 208: ADD # 4 -1
               1142: MOV 0 1 209: MOV # 0 @ -2
               1143: MOV 0 1 210: JMP -2
               1144: MOV 0 1 211: ADD # 4 -1
               1145: MOV 0 1 212: MOV # 0 @ -2
                    PROGRAMME PROGRAMME X Y






          BASE DE DIRECTIVES DE GUERRE 9.

          L'instruction en cours d'exécution serait toujours dis-
          joué au bas de l'écran, en même temps que le précédent 23
          instructions (sur un écran de 24 lignes). Les informations pour les dis-
          jeu peut être générée que chaque instruction est interprétée et
          les valeurs des différents champs sont déterminés. Une sous-routine
          serait sortie le mnémonique ou la valeur numérique correspondant
          pour chaque champ codé. Il faut reconnaître, cependant, que cette
          sortie ralentir ème exécution de Mars. Dans une bataille durable
          plusieurs milliers de mesures que vous voudrez peut-être supprimer la sortie.

          Bien que l'écran décrit ci-dessus est utile pour le débogage
          programmes en parcourant leurs instructions, il ne donne aucune
          idée claire de l'action globale. C'est un peu comme voir que
          deux télévisés gros plans de pieds de gladiateurs dans le Roman
          arène.

          Une autre méthode nous avons l'intention d'essayer de créer un écran circulaire sur un
          terminal graphique. Deux grands cercles concentriques représentent l'
          Réseau CORE, et des symboles dans l'anneau formé par les cercles
          représenter les deux programmes de bataille.

          Le point des milieux de droite extrême peut être considéré comme
          l'adresse 0. Les symboles peuvent être tout simple mais distinguée
          formes (dire un point et une ligne). Informations complémentaires pourrait être
          affichés, tels que le temps écoulé ou une clé identifiant le
          les programmes correspondant aux symboles. On pourrait même avoir un
          Flash momentanée (un astérisque?) apparaissent à des adresses modifiées par
          Commandes MOV, les éclairs seraient interprétées soit comme artil-
          lerie ou de délocalisation. Bien sûr, le plus compliqué de l'affichage
          est, plus la bataille procéder.






          BASE DE DIRECTIVES DE GUERRE 10.

          La position de chaque symbole à l'écran circulaire peut être cal-
          calculée à partir de l'indice d'instruction pour le correspondant pro-
          gramme. Supposons qu'un programme est en cours d'exécution à l'emplacement I dans un CORE
          tableau avec 4096 éléments et sa position doit être indiqué sur une
          écran qui a 1000 points distinctes verticalement et hori-
          talement. Les coordonnées sur l'écran d'affichage sont alors donnés
          par les expressions 400 * cos (2piI/4096) et 400 *
          sin (2piI/4096).

          Avec un système graphique inférieur de résolution de l'affichage circulaire
          pourrait ne pas être possible, mais le tableau de base pourraient encore être repré-
          senté par un rectangle. Encore une fois les symboles semblent indiquer l'emplacement
          de chaque programme, bien qu'ils puissent apparaître de sauter ou de scintillement
          exécution légèrement même difficile déplacé "en continu" de l'adresse
          pour répondre. Une version brut d'un tel écran pourrait même être im-
          plemented sur un écran purement caractère orienté.

                          Extensions à Redcode et Mars

          La version de Mars présenté ici est facile à mettre en œuvre, et
          beaucoup d'entre vous voudront peut-être voir comment vous pouvez étendre votre système-la guerre de base
          température. Par exemple, dans cette version de Mars que deux bataille pro-
          grammes peuvent être exécutés à la fois. Serait-il difficile de laisser davantage de programmes
          exécuter? Que diriez-vous d'une nouvelle instruction Redcode qui permet une exécution
          gramme de formation pour démarrer un autre programme, il a copié dans un
          zone libre de CORE, et ainsi augmenter les chances qu'au moins
          un programme à partir de son «équipe» survivra à la bataille de la Guerre de base?

          Le jeu d'instructions Redcode donné ici est simple. Ceux
          vous avec accès à un ordinateur plus grand peut vouloir expérimenter
          avec de nouveaux jeux d'instructions et modes d'adressage, en faisant éventuellement
          Redcode plus comme un vrai langage d'assemblage. Instructions
          protéger un programme plus large d'une petite-dur à vaincre l'une serait
          aider à élever Guerre base à un niveau supérieur, plus intéressant.

          Nous serions heureux de documentation et des listes de systèmes de guerre de base
          et les programmes de bataille RedCode de ceux qui pensent qu'il est venu
          avec une idée particulièrement intéressante ou innovante. Envoyer
          correspondance à:

                                   DG Jones ou AK Dewdney
                                   Département d'Informatique
                                   L'Université de Western Ontario
                                   London, Ontario
                                   Canada
                                   N6A 5B7

